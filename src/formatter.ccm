module;
#include <chrono>
#include <concepts>
#include <format>
#include <iterator>
#include <string>
#include <type_traits>
export module moderna.logging:formatter;
import :context;
import :format_override;

namespace moderna::logging {
  /*
    Taken from
    https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
  */
  struct Colors {
    // Reset
    static constexpr std::string_view COLOR_OFF = "\033[0m"; // Text Reset

    // Regular Colors
    static constexpr std::string_view BLACK = "\033[0;30m"; // Black
    static constexpr std::string_view RED = "\033[0;31m"; // Red
    static constexpr std::string_view GREEN = "\033[0;32m"; // Green
    static constexpr std::string_view YELLOW = "\033[0;33m"; // Yellow
    static constexpr std::string_view BLUE = "\033[0;34m"; // Blue
    static constexpr std::string_view PURPLE = "\033[0;35m"; // Purple
    static constexpr std::string_view CYAN = "\033[0;36m"; // Cyan
    static constexpr std::string_view WHITE = "\033[0;37m"; // White

    // Bold
    static constexpr std::string_view BOLD_BLACK = "\033[1;30m"; // Black
    static constexpr std::string_view BOLD_RED = "\033[1;31m"; // Red
    static constexpr std::string_view BOLD_GREEN = "\033[1;32m"; // Green
    static constexpr std::string_view BOLD_YELLOW = "\033[1;33m"; // Yellow
    static constexpr std::string_view BOLD_BLUE = "\033[1;34m"; // Blue
    static constexpr std::string_view BOLD_PURPLE = "\033[1;35m"; // Purple
    static constexpr std::string_view BOLD_CYAN = "\033[1;36m"; // Cyan
    static constexpr std::string_view BOLD_WHITE = "\033[1;37m"; // White

    // Underline
    static constexpr std::string_view UNDERLINE_BLACK = "\033[4;30m"; // Black
    static constexpr std::string_view UNDERLINE_RED = "\033[4;31m"; // Red
    static constexpr std::string_view UNDERLINE_GREEN = "\033[4;32m"; // Green
    static constexpr std::string_view UNDERLINE_YELLOW = "\033[4;33m"; // Yellow
    static constexpr std::string_view UNDERLINE_BLUE = "\033[4;34m"; // Blue
    static constexpr std::string_view UNDERLINE_PURPLE = "\033[4;35m"; // Purple
    static constexpr std::string_view UNDERLINE_CYAN = "\033[4;36m"; // Cyan
    static constexpr std::string_view UNDERLINE_WHITE = "\033[4;37m"; // White

    // Background
    static constexpr std::string_view ON_BLACK = "\033[40m"; // Black
    static constexpr std::string_view ON_RED = "\033[41m"; // Red
    static constexpr std::string_view ON_GREEN = "\033[42m"; // Green
    static constexpr std::string_view ON_YELLOW = "\033[43m"; // Yellow
    static constexpr std::string_view ON_BLUE = "\033[44m"; // Blue
    static constexpr std::string_view ON_PURPLE = "\033[45m"; // Purple
    static constexpr std::string_view ON_CYAN = "\033[46m"; // Cyan
    static constexpr std::string_view ON_WHITE = "\033[47m"; // White

    // High Intensity
    static constexpr std::string_view HIGH_INTENSITY_BLACK = "\033[0;90m"; // Black
    static constexpr std::string_view HIGH_INTENSITY_RED = "\033[0;91m"; // Red
    static constexpr std::string_view HIGH_INTENSITY_GREEN = "\033[0;92m"; // Green
    static constexpr std::string_view HIGH_INTENSITY_YELLOW = "\033[0;93m"; // Yellow
    static constexpr std::string_view HIGH_INTENSITY_BLUE = "\033[0;94m"; // Blue
    static constexpr std::string_view HIGH_INTENSITY_PURPLE = "\033[0;95m"; // Purple
    static constexpr std::string_view HIGH_INTENSITY_CYAN = "\033[0;96m"; // Cyan
    static constexpr std::string_view HIGH_INTENSITY_WHITE = "\033[0;97m"; // White

    // Bold High Intensity
    static constexpr std::string_view BOLD_HIGH_INTENSITY_BLACK = "\033[1;90m"; // Black
    static constexpr std::string_view BOLD_HIGH_INTENSITY_RED = "\033[1;91m"; // Red
    static constexpr std::string_view BOLD_HIGH_INTENSITY_GREEN = "\033[1;92m"; // Green
    static constexpr std::string_view BOLD_HIGH_INTENSITY_YELLOW = "\033[1;93m"; // Yellow
    static constexpr std::string_view BOLD_HIGH_INTENSITY_BLUE = "\033[1;94m"; // Blue
    static constexpr std::string_view BOLD_HIGH_INTENSITY_PURPLE = "\033[1;95m"; // Purple
    static constexpr std::string_view BOLD_HIGH_INTENSITY_CYAN = "\033[1;96m"; // Cyan
    static constexpr std::string_view BOLD_HIGH_INTENSITY_WHITE = "\033[1;97m"; // White

    // High Intensity backgrounds
    static constexpr std::string_view ON_HIGH_INTENSITY_BLACK = "\033[0;100m"; // Black
    static constexpr std::string_view ON_HIGH_INTENSITY_RED = "\033[0;101m"; // Red
    static constexpr std::string_view ON_HIGH_INTENSITY_GREEN = "\033[0;102m"; // Green
    static constexpr std::string_view ON_HIGH_INTENSITY_YELLOW = "\033[0;103m"; // Yellow
    static constexpr std::string_view ON_HIGH_INTENSITY_BLUE = "\033[0;104m"; // Blue
    static constexpr std::string_view ON_HIGH_INTENSITY_PURPLE = "\033[0;105m"; // Purple
    static constexpr std::string_view ON_HIGH_INTENSITY_CYAN = "\033[0;106m"; // Cyan
    static constexpr std::string_view ON_HIGH_INTENSITY_WHITE = "\033[0;107m"; // White
  };

  /* Determines the formatting of the output based on the input logging */
  export template <typename F>
  concept Formatter = requires(const F f) {
    {
      f.template format(std::declval<const Context<Level::DEBUG> &>())
    } -> std::same_as<std::string>;
    {
      f.template format(std::declval<const Context<Level::ERROR> &>())
    } -> std::same_as<std::string>;
    {
      f.template format(std::declval<const Context<Level::FATAL> &>())
    } -> std::same_as<std::string>;
    {
      f.template format(std::declval<const Context<Level::INFO> &>())
    } -> std::same_as<std::string>;
    {
      f.template format(std::declval<const Context<Level::WARNING> &>())
    } -> std::same_as<std::string>;
  };

  struct ColorPalette {
    std::string_view debug = Colors::BOLD_BLUE;
    std::string_view error = Colors::BOLD_RED;
    std::string_view fatal = Colors::BOLD_HIGH_INTENSITY_RED;
    std::string_view info = Colors::BOLD_GREEN;
    std::string_view warning = Colors::BOLD_YELLOW;
  };

  static constexpr std::string_view default_debug_format = "[%L][%t[%FT%R%z]][%S[%F:%l]\t] %M";
  static constexpr std::string_view default_info_format = "[%L ][%t[%FT%R%z]][%S[%F:%l]\t] %M";
  static constexpr std::string_view default_warn_format = "[%L ][%t[%FT%R%z]][%S[%F:%l]\t] %M";
  static constexpr std::string_view default_error_format = "[%L][%t[%FT%R%z]][%S[%F:%l]\t] %M";
  static constexpr std::string_view default_fatal_format = "[%L][%t[%FT%R%z]][%S[%F:%l]\t] %M";

  /*
    The default formatter. When used in a constexpr way this will link up the parts and replace them
    with appropriate formatting and coloring.
  */
  export struct DefaultFormatter {
    constexpr DefaultFormatter() {
      {
        auto debug_ctx = std::basic_format_parse_context{default_debug_format};
        _debug_formatter.parse(debug_ctx);
      }
      {
        auto info_ctx = std::basic_format_parse_context{default_info_format};
        _info_formatter.parse(info_ctx);
      }
      {
        auto warn_ctx = std::basic_format_parse_context{default_warn_format};
        _warn_formatter.parse(warn_ctx);
      }
      {
        auto error_ctx = std::basic_format_parse_context{default_error_format};
        _error_formatter.parse(error_ctx);
      }
      {
        auto fatal_ctx = std::basic_format_parse_context{default_fatal_format};
        _fatal_formatter.parse(fatal_ctx);
      }
    }
    template <Level log_level> std::string format(const Context<log_level> &ctx) const {
      using context_t = std::basic_format_context<std::back_insert_iterator<std::string>, char>;
      std::string to_format;
      /*
        TODO: We are using an internal constructor for std::format, this should probably be fixed
        with a custom class that implements basic_format_context as a concept.
      */
      auto format_ctx = std::__format_context_create(
        std::back_inserter(to_format), std::basic_format_args{std::make_format_args<context_t>(ctx)}
      );
      if constexpr (log_level == Level::DEBUG) {
        _debug_formatter.format(ctx, format_ctx);
      } else if constexpr (log_level == Level::INFO) {
        _info_formatter.format(ctx, format_ctx);
      } else if constexpr (log_level == Level::WARNING) {
        _warn_formatter.format(ctx, format_ctx);
      } else if constexpr (log_level == Level::ERROR) {
        _error_formatter.format(ctx, format_ctx);
      } else if constexpr (log_level == Level::FATAL) {
        _fatal_formatter.format(ctx, format_ctx);
      } else {
        static_assert(false, "Unsupported log level");
      }
      return to_format;
    }

  private:
    std::formatter<Context<Level::DEBUG>> _debug_formatter;
    std::formatter<Context<Level::INFO>> _info_formatter;
    std::formatter<Context<Level::WARNING>> _warn_formatter;
    std::formatter<Context<Level::ERROR>> _error_formatter;
    std::formatter<Context<Level::FATAL>> _fatal_formatter;
  };
  static_assert(Formatter<DefaultFormatter>);

  /*
    Adds color to whatever previous formatter used.
  */
  export template <Formatter formatter_t = DefaultFormatter> struct ColorfulFormatter {
  public:
    ColorfulFormatter(formatter_t formatter, ColorPalette palette = ColorPalette{}) :
      _formatter{std::move(formatter)}, _palette{std::move(palette)} {}
    template <Level log_level> std::string format(const Context<log_level> &ctx) const {
      std::string colorless_formatted = _formatter.format(ctx);
      if constexpr (log_level == Level::DEBUG) {
        colorless_formatted.insert(0, _palette.debug);
      } else if constexpr (log_level == Level::INFO) {
        colorless_formatted.insert(0, _palette.info);
      } else if constexpr (log_level == Level::WARNING) {
        colorless_formatted.insert(0, _palette.warning);
      } else if constexpr (log_level == Level::ERROR) {
        colorless_formatted.insert(0, _palette.error);
      } else if constexpr (log_level == Level::FATAL) {
        colorless_formatted.insert(0, _palette.fatal);
      }
      colorless_formatted.append(Colors::COLOR_OFF.data());
      return colorless_formatted;
    }

  private:
    formatter_t _formatter;
    ColorPalette _palette;
  };
}